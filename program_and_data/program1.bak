#lang racket

;; Function to read integers from a file and output a list
(define (read-integers-from-file filename)
  (define input (open-input-file filename))
  (define integers-list (read-integers-helper input '()))
  (close-input-port input)
  integers-list)

(define (read-integers-helper input accum)
  (define next-value (read input))
  (if (eof-object? next-value)
      (reverse accum)
      (read-integers-helper input (cons next-value accum))))

;; Function to consolidate list into value-frequency pairs
(define (value-frequency-pairs lst)
  (define (count-occurrences val lst)
    (length (filter (位 (x) (= x val)) lst)))
  (define unique-values (remove-duplicates lst))
  (map (位 (val) (list val (count-occurrences val lst))) unique-values))

;; Function to produce a sorted list from value-frequency pairs
(define (sorted-list-from-pairs pairs)
  (apply append
         (map (位 (pair) (make-list (second pair) (first pair)))
              (sort pairs (位 (a b) (< (first a) (first b)))))))

;; Test Function
(define (test-read-integers-from-file filename expected-integers)
  (define actual-integers (read-integers-from-file filename))
  (if (equal? actual-integers expected-integers)
      (printf "Test passed for ~a: ~a\n" filename actual-integers)
      (printf "Test failed for ~a. Expected: ~a, Got: ~a\n" filename expected-integers actual-integers)))

;; Test function for sorted list
(define (test-sorted-list filename)
  (define integers-list (read-integers-from-file filename))
  (define value-frequency-list (value-frequency-pairs integers-list))
  (define sorted-list (sorted-list-from-pairs value-frequency-list))
  (printf "Sorted list for ~a: ~a\n" filename sorted-list))

;; Example usage
(test-read-integers-from-file "Data-1.txt" '(1 2 3 2 2 3 5 -1))
(test-sorted-list "Data-1.txt")

(test-read-integers-from-file "Data-2.txt" '(5 1 2 3 2 2 -1 3))
(test-sorted-list "Data-2.txt")

(test-read-integers-from-file "Data-3.txt" '(1 3 3 2 2 -1 5 2))
(test-sorted-list "Data-3.txt")

